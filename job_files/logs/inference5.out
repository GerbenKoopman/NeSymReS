============================================================================================== 
Warning! Mixing Conda and module environments may lead to corruption of the
user environment. 
We do not recommend users mixing those two environments unless absolutely
necessary. Note that 
SURF does not provide any support for Conda environment.
For more information, please refer to our software policy page:
https://servicedesk.surf.nl/wiki/display/WIKI/Software+policy+Snellius#SoftwarepolicySnellius-UseofAnacondaandMinicondaenvironmentsonSnellius 

Remember that many packages have already been installed on the system and can
be loaded using 
the 'module load <package__name>' command. If you are uncertain if a package is
already available 
on the system, please use 'module avail' or 'module spider' to search for it.
============================================================================================== 
Lightning automatically upgraded your loaded checkpoint from v1.3.3 to v2.4.0. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint ../../../../../home/scur1229/nesymres/weights/100M.ckpt`
     Unnamed: 0  ... num_points
0             0  ...        500
1             1  ...        500
2             2  ...        500
3             3  ...        500
4             4  ...        500
..          ...  ...        ...
195         195  ...        500
196         196  ...        500
197         197  ...        500
198         198  ...        500
199         199  ...        500

[200 rows x 4 columns]
  0%|          | 0/200 [00:00<?, ?it/s]  0%|          | 1/200 [00:20<1:07:05, 20.23s/it]  1%|          | 2/200 [00:39<1:04:51, 19.65s/it]  2%|▏         | 3/200 [00:52<55:10, 16.80s/it]    2%|▏         | 4/200 [01:32<1:23:55, 25.69s/it]  2%|▎         | 5/200 [01:35<57:22, 17.66s/it]    3%|▎         | 6/200 [02:04<1:09:37, 21.53s/it]  4%|▎         | 7/200 [02:30<1:13:50, 22.96s/it]  4%|▍         | 8/200 [02:45<1:05:06, 20.34s/it]  4%|▍         | 9/200 [03:07<1:06:44, 20.96s/it]  5%|▌         | 10/200 [03:15<53:51, 17.01s/it]   6%|▌         | 11/200 [03:41<1:02:03, 19.70s/it]  6%|▌         | 12/200 [04:03<1:03:43, 20.34s/it]  6%|▋         | 13/200 [04:16<56:10, 18.03s/it]    7%|▋         | 14/200 [04:39<1:01:21, 19.79s/it]  8%|▊         | 15/200 [04:45<47:38, 15.45s/it]    8%|▊         | 16/200 [05:06<52:16, 17.04s/it]  8%|▊         | 17/200 [05:14<44:19, 14.53s/it]  9%|▉         | 18/200 [05:27<42:15, 13.93s/it] 10%|▉         | 19/200 [06:02<1:01:16, 20.31s/it] 10%|█         | 20/200 [06:06<46:17, 15.43s/it]   10%|█         | 21/200 [06:24<48:15, 16.17s/it] 11%|█         | 22/200 [06:55<1:01:27, 20.72s/it] 12%|█▏        | 23/200 [07:36<1:18:28, 26.60s/it] 12%|█▏        | 24/200 [08:00<1:16:10, 25.97s/it] 12%|█▎        | 25/200 [08:04<56:38, 19.42s/it]   13%|█▎        | 26/200 [08:31<1:02:41, 21.62s/it] 14%|█▎        | 27/200 [08:56<1:05:40, 22.77s/it] 14%|█▍        | 28/200 [09:20<1:05:48, 22.95s/it] 14%|█▍        | 29/200 [09:42<1:04:32, 22.65s/it] 14%|█▍        | 29/200 [10:33<1:02:17, 21.86s/it]
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: -x_1 + log(x_1 + x_2**4)
Pred: -0.970055561028065*x_1 + log(x_2**4 + 5.16311283873242*x_2**2)
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: sin(x_3) + sin(x_3/(x_1 - x_2))
Pred: -0.134446995817255*sin(1.08709529751317*x_1) + sin(x_3 - sin(x_2))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: x_2*cos(x_1*x_3 - x_2) - 1
Pred: x_2*sin(0.0274425201017931*x_1*x_2*x_3) - 1
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: x_2 + tan(x_1 - 1/(x_1 - 1))
Pred: x_2 + tan(x_1 + 1/(x_1 + 0.0716632884320009*x_3 - 0.0293008086543197))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: x_1 - x_2**2 - log(x_2)
Pred: ((x_1)+(((-1)*((x_2)**(2)))+((-1)*(ln(((x_2)**(2))**((1)/(4)))))))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Attention, input values are very large. Optimization may fail due to numerical issues
Loss constructed, starting new BFGS optmization...
All-Nan slice encountered
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Attention, input values are very large. Optimization may fail due to numerical issues
Loss constructed, starting new BFGS optmization...
True: x_1 - tan(exp(x_1 - 1))
Pred: x_1 + tan(1.55066849948424*exp(x_1 + 0.068513010047998*x_1/x_3))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: x_1*(x_1 + 1)/(x_1 - 1)
Pred: x_2*(x_1 + 1.92993140881234)/(x_2 + 0.0309240220529895*x_2/(x_1*x_3))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Attention, input values are very large. Optimization may fail due to numerical issues
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Attention, input values are very large. Optimization may fail due to numerical issues
Loss constructed, starting new BFGS optmization...
True: x_1*x_3/(-x_1 + x_2) - x_3
Pred: x_1*x_3/(-1.00000000019448*x_1 + x_2) - x_3
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: tan(x_2 + x_3)/(-x_1 - 1)
Pred: -tan(x_2 + x_3)/(x_1 + 1.00000000110058)
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: x_1 + cos(x_1 - x_2*x_3)
Pred: ((x_1)+(cos((x_1)+((-1)*((x_2)*(x_3))))))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: x_3 + x_3/(x_1 + x_2 + x_3)
Pred: x_3 + x_3/(x_1 + x_2 + x_3 + 8.78094567432443e-9)
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: sqrt(-x_1*x_2 + x_3/x_1)
Pred: sqrt(Abs(x_1*x_2 - 0.99999999678323*x_3/x_1))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Attention, input values are very large. Optimization may fail due to numerical issues
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Attention, input values are very large. Optimization may fail due to numerical issues
Loss constructed, starting new BFGS optmization...
True: x_1/(x_1 + x_3 + log(x_2**4))
Pred: ((x_1)*(((x_1)+((x_3)+(ln((x_2)**(4)))))**(-1)))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: sin(x_2/(-x_1 + x_2)) - tan(1)
Pred: sin(x_1/(-x_1 + x_2 - sin(x_3))) - 0.986735983969337
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: cos(x_2 + sin(x_1)/cos(x_3))
Pred: (cos((x_2)+((sin(x_1))+(tan(x_3)))))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: x_1**2 + x_2 - tan(1) - 1
Pred: x_1**2 + x_2 - 1.5064649383614e-7*cos(3.1305839197848*x_3) - 2.55740806434228
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: x_2*sin(x_1**2 + x_1*x_2)
Pred: ((x_2)*(sin((x_1)*((x_2)+(sin(x_3))))))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Attention, input values are very large. Optimization may fail due to numerical issues
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Attention, input values are very large. Optimization may fail due to numerical issues
Loss constructed, starting new BFGS optmization...
True: -x_1/(x_1 - x_2 + x_3 - 1) + x_3
Pred: x_1/(-x_1 + x_2 - x_3 + 0.999999992911161) + x_3
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: x_2/(x_2 + cos(x_1*x_3))
Pred: x_2/(x_2 + cos(x_3*(x_2 - 6.04830819170839)))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Attention, input values are very large. Optimization may fail due to numerical issues
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Attention, input values are very large. Optimization may fail due to numerical issues
Loss constructed, starting new BFGS optmization...
True: 1 + tan(x_2)/(x_2*(-x_1 + x_2))
Pred: ((((x_1)+((-1)*(x_2)))**(-1))*((x_1)+(((-1)*(x_2))+((-1)*((x_3)*((x_2)**(-1)))))))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: 1/(x_1 - sin(cos(x_2)))
Pred: (((x_1)+((-1)*(cos(x_2))))**(-1))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Attention, input values are very large. Optimization may fail due to numerical issues
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Attention, input values are very large. Optimization may fail due to numerical issues
Loss constructed, starting new BFGS optmization...
True: (x_1 + 1)/(x_2 + 1) + 1
Pred: (x_1 - 2.63625102693506)/(x_2 - 0.553682273534248) + cos(0.860658427163526*x_3)
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Attention, input values are very large. Optimization may fail due to numerical issues
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Attention, input values are very large. Optimization may fail due to numerical issues
Loss constructed, starting new BFGS optmization...
True: log(-x_1 + x_2)/(x_2*(x_2 - 1))
Pred: (x_1 - x_2 + 0.260150741927094)/(x_2*(x_1/(x_3 - 1.48503575501982) - x_2**2))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: (x_3 - 1)*sin(x_1 + x_1/x_2)
Pred: (x_3 - 1.00000005595039)*sin(x_1 + x_1/x_2)
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: x_2*x_3*cos(x_1 + x_2) + x_2
Pred: ((x_2)+((x_2)*((x_3)*(cos((x_1)+(x_2))))))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: sin(x_2*tan(x_1**3 - x_2))
Pred: -sin(1.96402322470961*x_1 - x_2 + 1.65902780293826*x_3 - 0.924571275458575)
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: x_1*cos(sqrt(log(x_2))) + x_3
Pred: x_1/(-0.040871461204926*x_2**2 + x_2) + x_3
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: x_1*sqrt(-x_3 + sin(x_2))
Pred: x_1*sqrt(Abs(1.00000000584999*x_3 - sin(x_2)))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
True: cos(x_1 - tan(x_2**3))
Pred: cos(x_1 - tan(x_2**2*(x_3 + 0.491223737382282)))
Memory footprint of the encoder: 4.096e-05GB 

Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
All-Nan slice encountered
Constructing BFGS loss...
Flag idx remove ON, Removing indeces with high values...
checking input values range...
Loss constructed, starting new BFGS optmization...
All-Nan slice encountered
Warning all nans
Traceback (most recent call last):
  File "predict.py", line 136, in <module>
    main()
  File "predict.py", line 128, in main
    preds = predict(args)
  File "predict.py", line 115, in predict
    preds['expr_pred'].append(pred['best_bfgs_preds'][0])
IndexError: list index out of range

JOB STATISTICS
==============
Job ID: 12626642
Cluster: snellius
User/Group: scur1229/scur1229
State: RUNNING
Nodes: 1
Cores per node: 18
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:15:00 core-walltime
Job Wall-clock time: 00:10:50
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 120.00 GB (120.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
